/// <reference types="node" />
import type { BlobEIP4844Transaction } from './eip4844Transaction';
import type { AccessList, AccessListBuffer } from './types';
import type { Common } from '@ethereumjs/common';
export declare function checkMaxInitCodeSize(common: Common, length: number): void;
export declare class AccessLists {
    static getAccessListData(accessList: AccessListBuffer | AccessList): {
        AccessListJSON: AccessList;
        accessList: AccessListBuffer;
    };
    static verifyAccessList(accessList: AccessListBuffer): void;
    static getAccessListJSON(accessList: AccessListBuffer): any[];
    static getDataFeeEIP2930(accessList: AccessListBuffer, common: Common): number;
}
export declare const blobTxToNetworkWrapperDataFormat: (tx: BlobEIP4844Transaction) => {
    message: {
        chainId: bigint;
        nonce: bigint;
        maxPriorityFeePerGas: bigint;
        maxFeePerGas: bigint;
        gas: bigint;
        to: {
            selector: number;
            value: Buffer | null;
        };
        value: bigint;
        data: Buffer;
        accessList: {
            address: Buffer;
            storageKeys: Buffer[];
        }[];
        blobVersionedHashes: Buffer[];
        maxFeePerDataGas: bigint;
    };
    signature: {
        r: bigint;
        s: bigint;
        yParity: boolean;
    };
};
//# sourceMappingURL=util.d.ts.map